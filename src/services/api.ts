/* tslint:disable */
/* eslint-disable */
/**
 * Klokasale
 * Klokasale backend server api.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface CommonErrorResponse
 */
export interface CommonErrorResponse {
  /**
   *
   * @type {CommonErrorResponseError}
   * @memberof CommonErrorResponse
   */
  error?: CommonErrorResponseError;
}
/**
 *
 * @export
 * @interface CommonErrorResponseError
 */
export interface CommonErrorResponseError {
  /**
   * can be custom error if necessary
   * @type {number}
   * @memberof CommonErrorResponseError
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof CommonErrorResponseError
   */
  message?: string;
}
/**
 *
 * @export
 * @interface CommonPagination
 */
export interface CommonPagination {
  /**
   *
   * @type {number}
   * @memberof CommonPagination
   */
  pageNumber?: number;
  /**
   *
   * @type {number}
   * @memberof CommonPagination
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof CommonPagination
   */
  totalPage?: number;
  /**
   *
   * @type {number}
   * @memberof CommonPagination
   */
  totalRecordCount?: number;
}
/**
 *
 * @export
 * @interface CommonSuccessResponse
 */
export interface CommonSuccessResponse {
  /**
   *
   * @type {object}
   * @memberof CommonSuccessResponse
   */
  data?: object;
}
/**
 *
 * @export
 * @interface GetShops200Response
 */
export interface GetShops200Response {
  /**
   *
   * @type {ShopGetShopResp}
   * @memberof GetShops200Response
   */
  data?: ShopGetShopResp;
}
/**
 *
 * @export
 * @interface ShopCreateShopReq
 */
export interface ShopCreateShopReq {
  /**
   *
   * @type {string}
   * @memberof ShopCreateShopReq
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof ShopCreateShopReq
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof ShopCreateShopReq
   */
  shopGroupId: number;
}
/**
 *
 * @export
 * @interface ShopDeleteShopReq
 */
export interface ShopDeleteShopReq {
  /**
   *
   * @type {number}
   * @memberof ShopDeleteShopReq
   */
  shopGroupId: number;
}
/**
 *
 * @export
 * @interface ShopGetShopResp
 */
export interface ShopGetShopResp {
  /**
   *
   * @type {CommonPagination}
   * @memberof ShopGetShopResp
   */
  pagination?: CommonPagination;
  /**
   *
   * @type {Array<ShopShopResp>}
   * @memberof ShopGetShopResp
   */
  shops?: Array<ShopShopResp>;
}
/**
 *
 * @export
 * @interface ShopShopResp
 */
export interface ShopShopResp {
  /**
   *
   * @type {string}
   * @memberof ShopShopResp
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof ShopShopResp
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof ShopShopResp
   */
  createdBy?: string;
  /**
   *
   * @type {number}
   * @memberof ShopShopResp
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ShopShopResp
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof ShopShopResp
   */
  shopGroupId?: number;
}
/**
 *
 * @export
 * @interface ShopUpdateShopReq
 */
export interface ShopUpdateShopReq {
  /**
   *
   * @type {string}
   * @memberof ShopUpdateShopReq
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof ShopUpdateShopReq
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof ShopUpdateShopReq
   */
  shopGroupId: number;
}
/**
 *
 * @export
 * @interface UserUserLoginReq
 */
export interface UserUserLoginReq {
  /**
   *
   * @type {string}
   * @memberof UserUserLoginReq
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserUserLoginReq
   */
  username: string;
}
/**
 *
 * @export
 * @interface UserUserRegisterReq
 */
export interface UserUserRegisterReq {
  /**
   *
   * @type {string}
   * @memberof UserUserRegisterReq
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof UserUserRegisterReq
   */
  confirmPassword: string;
  /**
   *
   * @type {string}
   * @memberof UserUserRegisterReq
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserUserRegisterReq
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserUserRegisterReq
   */
  phoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof UserUserRegisterReq
   */
  username: string;
}

/**
 * ShopsApi - axios parameter creator
 * @export
 */
export const ShopsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Shop
     * @param {ShopCreateShopReq} createShopRequest Create Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShop: async (
      createShopRequest: ShopCreateShopReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createShopRequest' is not null or undefined
      assertParamExists('createShop', 'createShopRequest', createShopRequest);
      const localVarPath = `/v1/shops`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createShopRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Shop
     * @param {number} id shop id
     * @param {ShopDeleteShopReq} deleteShopReq Delete Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShop: async (
      id: number,
      deleteShopReq: ShopDeleteShopReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteShop', 'id', id);
      // verify required parameter 'deleteShopReq' is not null or undefined
      assertParamExists('deleteShop', 'deleteShopReq', deleteShopReq);
      const localVarPath = `/v1/shops/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(deleteShopReq, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Shop
     * @param {number} shopGroupId
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {string} [sortBy]
     * @param {string} [sortOrder]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShops: async (
      shopGroupId: number,
      pageNumber?: number,
      pageSize?: number,
      sortBy?: string,
      sortOrder?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'shopGroupId' is not null or undefined
      assertParamExists('getShops', 'shopGroupId', shopGroupId);
      const localVarPath = `/v1/shops`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageNumber !== undefined) {
        localVarQueryParameter['pageNumber'] = pageNumber;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize;
      }

      if (shopGroupId !== undefined) {
        localVarQueryParameter['shopGroupId'] = shopGroupId;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter['sortBy'] = sortBy;
      }

      if (sortOrder !== undefined) {
        localVarQueryParameter['sortOrder'] = sortOrder;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Shop
     * @param {number} id shop id
     * @param {ShopUpdateShopReq} updateShopReq Update Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShop: async (
      id: number,
      updateShopReq: ShopUpdateShopReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateShop', 'id', id);
      // verify required parameter 'updateShopReq' is not null or undefined
      assertParamExists('updateShop', 'updateShopReq', updateShopReq);
      const localVarPath = `/v1/shops/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateShopReq, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShopsApi - functional programming interface
 * @export
 */
export const ShopsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShopsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create Shop
     * @param {ShopCreateShopReq} createShopRequest Create Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createShop(
      createShopRequest: ShopCreateShopReq,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createShop(createShopRequest, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['ShopsApi.createShop']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update Shop
     * @param {number} id shop id
     * @param {ShopDeleteShopReq} deleteShopReq Delete Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteShop(
      id: number,
      deleteShopReq: ShopDeleteShopReq,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShop(id, deleteShopReq, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['ShopsApi.deleteShop']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get Shop
     * @param {number} shopGroupId
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {string} [sortBy]
     * @param {string} [sortOrder]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShops(
      shopGroupId: number,
      pageNumber?: number,
      pageSize?: number,
      sortBy?: string,
      sortOrder?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShops200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getShops(
        shopGroupId,
        pageNumber,
        pageSize,
        sortBy,
        sortOrder,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['ShopsApi.getShops']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update Shop
     * @param {number} id shop id
     * @param {ShopUpdateShopReq} updateShopReq Update Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateShop(
      id: number,
      updateShopReq: ShopUpdateShopReq,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateShop(id, updateShopReq, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['ShopsApi.updateShop']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * ShopsApi - factory interface
 * @export
 */
export const ShopsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ShopsApiFp(configuration);
  return {
    /**
     *
     * @summary Create Shop
     * @param {ShopCreateShopReq} createShopRequest Create Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShop(createShopRequest: ShopCreateShopReq, options?: any): AxiosPromise<CommonSuccessResponse> {
      return localVarFp.createShop(createShopRequest, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Update Shop
     * @param {number} id shop id
     * @param {ShopDeleteShopReq} deleteShopReq Delete Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShop(id: number, deleteShopReq: ShopDeleteShopReq, options?: any): AxiosPromise<CommonSuccessResponse> {
      return localVarFp.deleteShop(id, deleteShopReq, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get Shop
     * @param {number} shopGroupId
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {string} [sortBy]
     * @param {string} [sortOrder]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShops(
      shopGroupId: number,
      pageNumber?: number,
      pageSize?: number,
      sortBy?: string,
      sortOrder?: string,
      options?: any
    ): AxiosPromise<GetShops200Response> {
      return localVarFp
        .getShops(shopGroupId, pageNumber, pageSize, sortBy, sortOrder, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Update Shop
     * @param {number} id shop id
     * @param {ShopUpdateShopReq} updateShopReq Update Shop Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShop(id: number, updateShopReq: ShopUpdateShopReq, options?: any): AxiosPromise<CommonSuccessResponse> {
      return localVarFp.updateShop(id, updateShopReq, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * ShopsApi - object-oriented interface
 * @export
 * @class ShopsApi
 * @extends {BaseAPI}
 */
export class ShopsApi extends BaseAPI {
  /**
   *
   * @summary Create Shop
   * @param {ShopCreateShopReq} createShopRequest Create Shop Request Body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopsApi
   */
  public createShop(createShopRequest: ShopCreateShopReq, options?: RawAxiosRequestConfig) {
    return ShopsApiFp(this.configuration)
      .createShop(createShopRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Shop
   * @param {number} id shop id
   * @param {ShopDeleteShopReq} deleteShopReq Delete Shop Request Body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopsApi
   */
  public deleteShop(id: number, deleteShopReq: ShopDeleteShopReq, options?: RawAxiosRequestConfig) {
    return ShopsApiFp(this.configuration)
      .deleteShop(id, deleteShopReq, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Shop
   * @param {number} shopGroupId
   * @param {number} [pageNumber]
   * @param {number} [pageSize]
   * @param {string} [sortBy]
   * @param {string} [sortOrder]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopsApi
   */
  public getShops(
    shopGroupId: number,
    pageNumber?: number,
    pageSize?: number,
    sortBy?: string,
    sortOrder?: string,
    options?: RawAxiosRequestConfig
  ) {
    return ShopsApiFp(this.configuration)
      .getShops(shopGroupId, pageNumber, pageSize, sortBy, sortOrder, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Shop
   * @param {number} id shop id
   * @param {ShopUpdateShopReq} updateShopReq Update Shop Request Body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShopsApi
   */
  public updateShop(id: number, updateShopReq: ShopUpdateShopReq, options?: RawAxiosRequestConfig) {
    return ShopsApiFp(this.configuration)
      .updateShop(id, updateShopReq, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary User Login
     * @param {UserUserLoginReq} loginRequest Login Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userLogin: async (loginRequest: UserUserLoginReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'loginRequest' is not null or undefined
      assertParamExists('userLogin', 'loginRequest', loginRequest);
      const localVarPath = `/v1/users/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary User Login
     * @param {UserUserRegisterReq} loginRequest Register Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userRegister: async (
      loginRequest: UserUserRegisterReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginRequest' is not null or undefined
      assertParamExists('userRegister', 'loginRequest', loginRequest);
      const localVarPath = `/v1/users/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary User Login
     * @param {UserUserLoginReq} loginRequest Login Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userLogin(
      loginRequest: UserUserLoginReq,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(loginRequest, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['UsersApi.userLogin']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary User Login
     * @param {UserUserRegisterReq} loginRequest Register Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userRegister(
      loginRequest: UserUserRegisterReq,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userRegister(loginRequest, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['UsersApi.userRegister']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @summary User Login
     * @param {UserUserLoginReq} loginRequest Login Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userLogin(loginRequest: UserUserLoginReq, options?: any): AxiosPromise<CommonSuccessResponse> {
      return localVarFp.userLogin(loginRequest, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary User Login
     * @param {UserUserRegisterReq} loginRequest Register Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userRegister(loginRequest: UserUserRegisterReq, options?: any): AxiosPromise<CommonSuccessResponse> {
      return localVarFp.userRegister(loginRequest, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary User Login
   * @param {UserUserLoginReq} loginRequest Login Request Body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public userLogin(loginRequest: UserUserLoginReq, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .userLogin(loginRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary User Login
   * @param {UserUserRegisterReq} loginRequest Register Request Body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public userRegister(loginRequest: UserUserRegisterReq, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .userRegister(loginRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}
